package com.bridgeit.objectorientedprograms;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.security.KeyStore.Entry;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.bridgeit.utillity.Util;


	public class Person implements Serializable {

		  
		  private String firstName;
		  private String lastName;
		  
		  private String city;
		  private String state;
		  private String zip;
		  private String phone;

		  public Person() {
		   
		  }

		  public Person( String firstName, String lastName,
		                String city,
		                String state, String zip,
		                String phone) {

		   
		    this.firstName = firstName;
		    this.lastName = lastName;
		    
		    this.city = city;
		    this.state = state;
		    this.zip = zip;
		    this.phone = phone;
		 

		  }


		 
		  public String getFirstName() {
		    return this.firstName;
		  }
		  public void setFirstName() {
			     this.firstName=firstName;
			  }

		  public String getLastName() {
		    return this.lastName;
		  }
		  public void setLastName() {
			    this.lastName=lastName;
			  }

		

		  public String getCity() {
		    return this.city;
		  }

		  public String getState() {
		    return this.state;
		  }
		  public void setState() {
			     this.state=state;
			  }

		  public String getzip() {
		    return this.zip;
		  }
		  public void setzip() {
			     this.zip=zip;
			  }

		  public String getPhone() {
		    return this.phone;
		  }
		  public void setPhone() {
			     this.phone=phone;
			  }

		  public String toString() {
		        return "\n\nName: " + getFirstName() + "\nlastname: " + getLastName() + "\nPhone: " + getPhone() + "\ncity: " +
		                getCity() + "\nzip: " + getzip();
		    }
		  private int entries = 0;
		    Person[] contents=new Person[10];
		    public void initEntries(int e){
		        contents = new Person[e];
		        for (int i = 0;i<contents.length;i++){      //Initializes an array of entries, then loops through to initialize each individual entry
		            contents[i] = new Person();
		        }
		    }
		    public int getEntries(){
		        return contents.length;
		    }
		    Util util=new Util();
			 public void add(){
				 System.out.println("enter how many persons do you want to enter:");
				 int n=util.inputInteger();
				 System.out.println("enter person firstname:");
				 String firstName=util.inputString();
				 System.out.println("enter person lastname:");
				 String lastName=util.inputString();
				 System.out.println("enter person city:");
				 String city=util.inputString();
				 System.out.println("enter person state");
				 String state=util.inputString();
				 System.out.println("enter person zip");
				 String zip=util.inputString();
				 System.out.println("enter person phone number");
				 String phone=util.inputString();
				 		
			        if (entries<contents.length){
			       contents[entries] = new Person(firstName, lastName, city,state,zip, phone);
			        entries++;
			        }
			        else System.out.println("Error: book is full");
			       
			        System.out.println(contents[0]);
			        
			        
		 
		 }

			    //Removes an entry from the book
			    public void remove(int entry){
			    	System.out.println("enter entry which do you want delete:");
			    	entry=util.inputInteger();
			        if (entries>0){
			            contents[entry] = new Person();
			            for (int i = 0;i<entries-entry;i++){
			                if (entry+1==entries) contents[entry] = new Person();
			                else{
			                    Person temp = contents[entry+i];
			                    contents[entry+i] = contents[entry+i+1]; //Removes an entry end moves each entry after it one backwards.
			                    contents[entry+i+1] = temp;
			                }
			            }
			            entries--;
			            }
			            else System.out.println("Error: book is empty.");
			    }

			    //Changes the values of an entry
			    public void edit(String firstName, String lastName, String city , String state,String zip,String phone, int selection){
			        contents[selection].firstName = firstName;
			        contents[selection].lastName = lastName;
			        contents[selection].city = city;
			        contents[selection].state = state;
			        contents[selection].zip = zip;
			        contents[selection].phone = phone;
			    }

			    //Sorts the book based on a part of the entry
			    //int n is used to tell which part of the entries to base the sort on
			    public void sort(int n){
			        for(int i = 0;i<contents.length;i++){
			            for (int j = 0;j<contents.length;j++){
			                switch(n){
			                    case 1:
			                        if (contents[i].firstName.compareTo(contents[j].firstName)<0){
			                            Person temp = contents[i];
			                            contents[i] = contents[j];
			                            contents[j] = temp;
			                        }
			                        break;
			                    case 2:
			                        if (contents[i].lastName.compareTo(contents[j].lastName)<0){
			                            Person temp = contents[i];
			                            contents[i] = contents[j];
			                            contents[j] = temp;
			                        }
			                        break;
			                 
			                    
			                    default: 
			                        System.out.println("Error: invalid field");
			                        break;
			                }
			            }
			        }
			    }

}



 
 