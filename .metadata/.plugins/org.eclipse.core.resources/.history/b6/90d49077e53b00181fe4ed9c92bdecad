package com.bridgeit.objectorientedprograms;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.security.KeyStore.Entry;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


	public class Person implements Serializable {

		  
		  private String firstName;
		  private String lastName;
		  
		  private String city;
		  private String state;
		  private String zip;
		  private String phone;

		  public Person() {
		   
		  }

		  public Person( String firstName, String lastName,
		                String city,
		                String state, String zip,
		                String phone) {

		   
		    this.firstName = firstName;
		    this.lastName = lastName;
		    
		    this.city = city;
		    this.state = state;
		    this.zip = zip;
		    this.phone = phone;
		 

		  }


		 
		  public String getFirstName() {
		    return this.firstName;
		  }
		  public void setFirstName() {
			     this.firstName=firstName;
			  }

		  public String getLastName() {
		    return this.lastName;
		  }
		  public void setLastName() {
			    this.lastName=lastName;
			  }

		

		  public String getCity() {
		    return this.city;
		  }

		  public String getState() {
		    return this.state;
		  }
		  public void setState() {
			     this.state=state;
			  }

		  public String getzip() {
		    return this.zip;
		  }
		  public void setzip() {
			     this.zip=zip;
			  }

		  public String getPhone() {
		    return this.phone;
		  }
		  public void setPhone() {
			     this.phone=phone;
			  }

		  public String toString() {
		        return "\n\nName: " + getFirstName() + "\nlastname: " + getLastName() + "\nPhone: " + getPhone() + "\ncity: " +
		                getCity() + "\nzip: " + getzip();
		    }
		    
		  private int entries = 0;
		    Entry[] contents;
		    public void initEntries(int e){
		        contents = new Entry[e];
		        for (int i = 0;i<contents.length;i++){      //Initializes an array of entries, then loops through to initialize each individual entry
		            contents[i] = new Entry();
		        }
		    }
		    public int getEntries(){
		        return contents.length;
		    }
		    //Adds an entry to the book
		    public void add(String firstName, String lastName,String city,String state, String zip,String phone){
		        if (entries<contents.length){
		        contents[entries] = new Entry(firstName, lastName, city,state, zip,phone);
		        entries++;
		        }
		        else System.out.println("Error: book is full");
		    }

		    //Removes an entry from the book
		    public void remove(int entry){
		        if (entries>0){
		            contents[entry] = new Entry();
		            for (int i = 0;i<entries-entry;i++){
		                if (entry+1==entries) contents[entry] = new Entry();
		                else{
		                    Entry temp = contents[entry+i];
		                    contents[entry+i] = contents[entry+i+1]; //Removes an entry end moves each entry after it one backwards.
		                    contents[entry+i+1] = temp;
		                }
		            }
		            entries--;
		            }
		            else System.out.println("Error: book is empty.");
		    }

		    //Changes the values of an entry
		    public void edit( String firstName,String lastName,String city,String int selection){
		        contents[selection].firstName = firstName;
		        contents[selection].lastName = lastName;
		        contents[selection].city = city;
		        contents[selection].state = state;
		        contents[selection].zip = zip;
		        contents[selection].phone= phone;
		        
		    }

		    //Sorts the book based on a part of the entry
		    //int n is used to tell which part of the entries to base the sort on
		    public void sort(int n){
		        for(int i = 0;i<contents.length;i++){
		            for (int j = 0;j<contents.length;j++){
		                switch(n){
		                    case 1:
		                        if (contents[i].firstName.compareTo(contents[j].firstName)<0){
		                            Entry temp = contents[i];
		                            contents[i] = contents[j];
		                            contents[j] = temp;
		                        }
		                        break;
		                   
		                    case 2:
		                        if (contents[i].Zip.compareTo(contents[j].Zip)<0){
		                            Entry temp = contents[i];
		                            contents[i] = contents[j];
		                            contents[j] = temp;
		                        }
		                        break;
		                    default: 
		                        System.out.println("Error: invalid field");
		                        break;
		                }
		            }
		        }
		    }
		    public void addFromCopy(Entry e){
		        if (entries<contents.length){
		            contents[entries] = e;
		            entries++;
		            }
		            else System.out.println("Error: book is full");
		    }
	

}



 
 