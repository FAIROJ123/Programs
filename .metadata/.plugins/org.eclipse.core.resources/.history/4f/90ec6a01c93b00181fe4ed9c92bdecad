package com.bridgeit.objectorientedprograms;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.KeyStore.Entry;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class Person 
{
	 private String first;
     private String last;
     private String city;
	 private String state;
	 private String zip;
	 private String phonenumber;
    
	
	 public String getFirst()
	 {
		 return this.first;
	 }
	 public void setFirst()
	 {
		 this.first=first;
	 }
	 public String getlast()
	 {
		 return this.last;
	 }
	 public void setlast()
	 {
		 this.last=last;
	 }
	 public String getcity()
	 {
		 return this.city;
	 }
	 public void setcity()
	 {
		 this.city=city;
	 }
	 public String getstate()
	 {
		 return this.state;
	 }
	 public void setstate()
	 {
		 this.state=state;
	 }
	 public String getzip()
	 {
		 return this.zip;
	 }
	 public void setzip()
	 {
		 this.zip=zip;
	 }
	 public String getphonenumber()
	 {
		 return this.phonenumber;
	 }
	 public void setphonenumber()
	 {
		 this.phonenumber=phonenumber;
	 }
	 
    
     public void readEntry(){
         System.out.println("First Name:"+first );
         System.out.println("Last Name:"+last );
         System.out.println("city:"+city );
         System.out.println("state:"+state );
         System.out.println("zip:"+zip );
         System.out.println("phonenumber:"+phonenumber );
     }
     
     
     private int entries = 0;
     Person[] contents;
     public void entries(int e){
    	contents = new Person[e];
         for (int i = 0;i<contents.length;i++){      //Initializes an array of entries, then loops through to initialize each individual entry
             contents[i] = new Person();
         }
     }
     public int getEntries(){
         return contents.length;
     }

     public void add( ){
         if (entries<contents.length){
         contents[entries] = new Person();
         entries++;
         }
         else System.out.println("Error: book is full");
     }

     
     public void remove(int entry){
         if (entries>0){
             contents[entry] = new Person();
             for (int i = 0;i<entries-entry;i++){
                 if (entry+1==entries) contents[entry] = new Person();
                 else{
                     Person temp = contents[entry+i];
                     contents[entry+i] = contents[entry+i+1]; //Removes an entry end moves each entry after it one backwards.
                     contents[entry+i+1] = temp;
                 }
             }
             entries--;
             }
             else System.out.println("Error: book is empty.");
     }


     public void edit(int selection){
         contents[selection].first = first;
         contents[selection].last = last;
         contents[selection].city = city;
         contents[selection].state = state;
         contents[selection].zip = zip;
         contents[selection].phonenumber = phonenumber;
     }

     
     public void sort(int n){
         for(int i = 0;i<contents.length;i++){
             for (int j = 0;j<contents.length;j++){
                 switch(n){
                     
                     case 1:
                         if (contents[i].last.compareTo(contents[j].last)<0){
                             Person temp = contents[i];
                             contents[i] = contents[j];
                             contents[j] = temp;
                         }
                         break;
                     case 2:
                         if (contents[i].zip.compareTo(contents[j].zip)<0){
                             Person temp = contents[i];
                             contents[i] = contents[j];
                             contents[j] = temp;
                         }
                         break;
                    
                     default: 
                         System.out.println("Error: invalid field");
                         break;
                 }
             }
         }
     }
     public void addFromCopy(Entry e){
         if (entries<contents.length){
             contents[entries] = (Person) e;
             entries++;
             }
             else System.out.println("Error: book is full");
     }
    

}



 
 